##from_line_index, from_station_index, to_line_index, to_station_index
## if from station not on same line as to station then need to change at Union Square
# n_line_index = mta.index[:n_line]
# l_line_index = mta.index[:l_line]
# six_line_index = mta.index[:six_line]
#
# def plan_trip(from_line, from_station, to_line, to_station)

# end
# when you say where your going it then performs a loop and gets the index's of from_line to the to_line
# if from_line == "n_line" && mta[:n_line].index(to_station)
#      stop_amount = mta[:n_line].index(to_station) - mta[:n_line].index(from_station)
#     puts "Your journey will take " + stop_amount.to_s + " stops"
#   end
#   if from_line == "l_line" && mta[:l_line].index(to_station)
#     stop_amount = mta[:l_line].index(to_station) - mta[:l_line].index(from_station)
#   puts "Your journey will take " + stop_amount.to_s + " stops"
#   end
#
#   if from_line == "six_line" && mta[:six_line].index(to_station)
#    stop_amount = mta[:six_line].index(to_station) - mta[:six_line].index(from_station)
#    puts "Your journey will take " + stop_amount.to_s + " stops"
#   end
# end
stations.each do |station|
    if @to_station ==  station
      puts " You will end at the #{line}"
    end


    # Title: MTA Lab
    # Activity:
    #
    # Students should create a program that models a simple subway system.
    #
    # The program takes the line and stop that a user is getting on at and the line and stop that user is getting off at and prints the total number of stops for the trip.
    #
    # There are 3 subway lines:
    # The N line has the following stops: Times Square, 34th, 28th, 23rd, Union Square, and 8th
    # The L line has the following stops: 8th, 6th, Union Square, 3rd, and 1st
    # The 6 line has the following stops: Grand Central, 33rd, 28th, 23rd, Union Square, and Astor Place.
    # All 3 subway lines intersect at Union Square, but there are no other intersection points.
    # For example, this means the 28th stop on the N line is different than the 28th street stop on the 6 line, so you'll have to differentiate this when you name your stops in the arrays.
    # We should be able to say:
    #
    # plan_trip( :n, "Times Square", :l, "Grand Central" )
    # # Or something along those lines
    # Hints:
    #
    # Don't worry about user input initially: get it working with hardcoded values first, and wire up the user interface once that's working
    # Scope works in a different way in Ruby, so variables that you define outside won't be accessible in a method. Maybe think about using a function to return data. Or perhaps research other types of variables
    # A symbol can't just be a number!
    # Consider diagraming the lines by sketching out the subway lines and their stops and intersection.
    # Make subway lines keys in a hash, while the values are an array of all the stops on each line.
    # The key to the lab is to find the intersection of the lines at Union Square.
    # Make sure the stops that are the same for different lines have different names (i.e. 23rd on the N and on the 6 need to be differentiated)
    require 'pry'
